@implements IDisposable
@inject Globals Globals
@inject HttpClient Http
@inject NavigationManager Navigator
@using blazor.Shared.Templates
@using System.Text.Json
@using Microsoft.Data.Sqlite;

<div id="todoList" class="@Globals.CurrentFilter">
    @foreach (KeyValuePair<string, TaskItem> entry in userTasks.Tasks)
    {
        string uuid = entry.Key;
        string taskName = entry.Value.TaskName;
        string taskStatus = entry.Value.TaskStatus;
        DateTime date = entry.Value.Date;
        <div class="todo-item @taskStatus.Replace(" ", "-")">
            <p class="status-indicator">@taskStatus</p>
            <h3>
                @if (tasksBeingEdited.Contains(uuid))
                {
                    <div class="task-input-container flex-row">
                        <input maxlength="100" value="@taskName" @oninput="args => handleTaskNameUpdate(uuid, args.Value?.ToString() ?? string.Empty)" />
                        <button @onclick="() => RenameTask(uuid)">Update</button>
                    </div>
                }
                else
                {
                    @taskName
                }
            </h3>
            <div class="task-options">
                <div class="flex-row">
                    <button class="task-complete-btn @(taskStatus == "complete" ? "hidden" : "")" @onclick='() => UpdateTask(uuid, "complete")'>Complete</button>
                    <button class="task-reset-btn @(taskStatus == "complete" ? "" : "hidden")" @onclick='() => UpdateTask(uuid, "in progress")'>Reset</button>
                    <button class="task-edit-btn" @onclick="() => tasksBeingEdited.Add(uuid)">Edit</button>
                    <button class="task-delete-btn" @onclick="() => DeleteTask(uuid)">Delete</button>
                </div>
                <p class="task-date">@date.ToString("MM/dd/yyyy")</p>
            </div>
        </div>
    }
</div>

@code {
    private UserTasks userTasks = new();
    private HashSet<string> tasksBeingEdited = new();
    private Dictionary<string, string> tasksToUpdate = new();

    protected override void OnInitialized()
    {
        Http.BaseAddress = new Uri(Navigator.BaseUri);
        Globals.Notify += OnNotify;
        OnNotify();
    }

    public void OnNotify()
    {
        InvokeAsync(async () =>
        {
            userTasks = await Globals.FetchUserTasks(Http, Globals.Username);
            StateHasChanged();
            Globals.InvokeSecondaryNotifier();
        });
    }

    public void Dispose()
    {
        Globals.Notify -= OnNotify;
    }

    private void handleTaskNameUpdate(string uuid, string value)
    {
        tasksToUpdate[uuid] = value;
    }

    private async void UpdateTask(string uuid, string newStatus)
    {
        bool success = await Globals.UpdateUserTask(Http, Globals.Username, uuid, newStatus);

        if (success)
        {
            Globals.InvokeNotifier();
        }
    }

    private async void RenameTask(string uuid)
    {
        string? newName = null;
        tasksToUpdate.TryGetValue(uuid, out newName);
        if (newName == null)
        {
            return;
        }

        Console.WriteLine(newName);
        bool success = await Globals.RenameUserTask(Http, Globals.Username, uuid, newName);

        if (success)
        {
            tasksBeingEdited.Remove(uuid);
            Globals.InvokeNotifier();
        }
    }

    private async void DeleteTask(string uuid)
    {
        bool success = await Globals.DeleteUserTask(Http, Globals.Username, uuid);

        if (success)
        {
            Globals.InvokeNotifier();
        }
    }
}
